

Milestone 1
Amulya Bodla(abodla)
        Grammar rules:
                Implemented grammar rules for conditional and arithmetic operations.
        Verification:
                Verified using test cases if the grammar is compliant with the grammar rules.
Piyush Reddy(prmudire)
        Design:
                Optimized Workflow for the Grammar (by eliminating left recursion cases)
        Validation:
                Validated if all the required features could be implemented.
Niharika Pothana(npothana)
        Grammar rules: 
                Implemented grammar rules for terminals and iterative loops. 
        Validation:
                Validated if all the required features could be implemented.	
Ritesh Reddy(ranugu)
        Design:
                Established Constraints for the Grammar (regex, patterns for terminals., etc)
        Verification:
                Verified using test cases if the grammar is compliant with the grammar rules.


Documentation has been done in a collaborative effort.

For Milestone 2

Amulya Bodla
	Implemented data types, type checking, ternery operator, while loop, boolean comparators, composite bool, not operator, display statement. (Interpreter)
	Added command line statements to integrate lexer, parser, interpreter. (Code Integration)
	Implemented boolean statements, relational operators. (Parser)

Niharika Pothana
	Implemented Lexer for generating tokens, preprocessor functionality. (Lexer)
	Implemented string functionalities: Reverse and concatenation. (Parser)
	Implemented Increment and Decrement operators. (Parser)
	
Piyush Reddy
	Worked on bug fixes in various components of the program. 
	Implemented block structured programming, declerations, assignment operation, conditional operators. (Parser)
	Implemented for loop, for in range, boolean expressions, arithmetic operations. (Interpreter)

Ritesh Reddy
	Implemented lookup, update, environment specific functionalities. (Interpreter)
	Implemented splitting characters within the tokenizer function. (Lexer)
	Worked on writing test cases.
	
Collective efforts have been done for testing the code using different test cases.
